name: Local Agent
version: 1.0.0
schema: v1

models:
  # —— 草稿模型（適度創造力）——
  - name: Qwen2.5-coder:7b
    provider: ollama
    model: qwen2.5-coder:7b-instruct
    roles: [chat, edit, apply]
    options:
      num_ctx: 131072
      temperature: 0.6

  # —— 自動補全（保守）——
  - name: Qwen2.5-Coder 7b
    provider: ollama
    model: qwen2.5-coder:7b-instruct
    roles: [autocomplete]
    options:
      num_ctx: 65536
      temperature: 0.2

  # —— 審稿模型（極保守，專職自我檢查）——
  - name: Qwen2.5-coder:7b-critic
    provider: ollama
    model: qwen2.5-coder:7b-instruct
    roles: [chat]
    options:
      num_ctx: 131072
      temperature: 0.1

systemMessage: >
  你是一位專業的程式碼分析專家。請使用繁體中文回答並保留原始術語。
  當分析 API（如 login）時，務必提供完整實作細節、精準路徑/方法、
  請求/回應結構與狀態碼、middleware/安全控管、依賴關係與教學範例，
  並以步驟描述整體請求到回應流程。
  You are a senior backend developer with 15+ years of experience in Golang and C# and Python.
  Specialize in Clean Architecture, database optimization (PostgreSQL, MongoDB), and DevOps. Analyze the @codebase thoroughly,
  including all subdirectories, use best practices,
  and return code in separate files with detailed comments using the latest language versions (Go 1.22, C# 12).

  # 自我驗證規範（每次回答必備）
  - 產出「驗證日誌」：列出查閱檔案與關鍵片段的路徑與行數/函式，並簡述選用理由。
  - 產出「引用與證據」：將每項結論對應至具體檔案與行數/函式名。
  - 產出「假設與不確定性」：列出推論假設、風險與仍需確認之處。
  - 若為 API/端點，務必提供「測試步驟」：curl/HTTPie/JavaScript fetch/Python requests/Go http 可直接運行的範例與預期狀態碼。
  - 若發現矛盾資訊，新增「矛盾解析」：優先較新且語境貼近的檔案，並解釋取捨。
  - 若資料不足，提供「下一步追查策略」：關鍵字、目標資料夾、可能 Owner。

context:
  - provider: code

  - provider: repo-map
    params:
      includeSignatures: true
      maxFiles: 400
      maxCharacters: 240000
      nRetrieve: 80
      nFinal: 25
      useReranking: false      # ← 關閉以避免錯誤
      prioritizeRecent: true
      recursive: true

  - provider: codebase
    params:
      nRetrieve: 80
      nFinal: 30
      minContentLength: 80
      useReranking: false      # ← 關閉以避免錯誤
      prioritizeRecent: true

# （不宣告 reranker，避免 "No reranker set up"）

indexing:
  embeddings:
    provider: transformers.js     # ← 改用 transformers.js
    model: xenova/all-MiniLM-L6-v2
  include:
    - "**/*.go"
    - "**/*.ts"
    - "**/*.tsx"
    - "**/*.js"
    - "**/*.py"
    - "**/*.cs"
    - "**/*.java"
    - "**/*.proto"
    - "**/*.graphql"
    - "**/*.yaml"
    - "**/*.yml"
    - "**/*.json"
    - "README.md"
    - "docs/**/*.md"
    - "api/**/*.md"
    - "test/**/*.md"
    - "**/*_test.go"
  exclude:
    - "node_modules/**"
    - ".git/**"
    - "dist/**"
    - "build/**"
    - "out/**"
    - "coverage/**"
    - "**/*.min.js"
    - "**/*.map"

slashCommands:
  - name: self-check
    description: 兩階段（草稿→審稿）生產答案，並強制輸出驗證日誌/引用/假設/測試/矛盾解析
    useCodebase: true
    prompt: |
      # 階段 A：草稿（以草稿模型思維）
      你是「草稿作者」。請根據使用者問題與可用上下文產生初稿。
      嚴格遵循 systemMessage 的「自我驗證規範」，務必輸出：
      - 驗證日誌
      - 引用與證據（檔案路徑與行號/函式）
      - 假設與不確定性
      - 測試步驟（若涉及 API/端點）
      - 矛盾解析（若有）
      - 下一步追查策略（若資料不足）

      # 階段 B：審稿（以審稿模型思維）
      你是「嚴格審稿者」。請逐點比對代碼庫證據，檢查：
      - 事實檢核：每項主張皆有明確檔案與行數/函式對應；避免引用過時檔。
      - 邏輯檢核：流程能串起 handler → service → repo → DB/外部服務。
      - 安全檢核：認證/授權/輸入驗證/速率限制/CSRF/CORS/RBAC/JWT 失效機制是否考量完整。
      - 測試可操作性：範例可直接運行；狀態碼與錯誤負載一致。
      - 反例思考：列出可能矛盾的檔案並解析取捨。
      最終輸出：
      - 《最終答案》（修正後完整稿）
      - 《審查差異清單》（指出修正與理由）
      - 《驗證日誌 / 引用與證據 / 假設與不確定性 / 測試步驟 / 矛盾解析》

  - name: scan-login-api
    description: 定位並拆解 login API（路由/方法/中介層/驗證/資料結構/依賴/教學/流程）
    useCodebase: true
    prompt: |
      請在整個代碼庫搜尋並彙整所有與 login 相關的 API（包含 Web/Mobile/Admin 變體）：
      1) 定位：列出檔案與路由宣告、handler/controller、service、repo、middlewares、auth 模組。
      2) 路徑分析：每個端點的 URL pattern 與 HTTP 方法。
      3) 實作細節：逐一解釋 handler/controller，指出使用的中介層（auth/rate limit/CORS/CSRF/RBAC/2FA）、加密/簽章/雜湊、輸入驗證。
      4) 資料結構：請求參數（path/query/body/headers）與回應格式（JSON、狀態碼）；若有錯誤 payload 也列出。
      5) 依賴關係：handler → service → repo → DB/Redis/OAuth/OIDC/JWT/外部服務 的呼叫鏈。
      6) 使用教學：輸出可直接運行的呼叫範例（curl、HTTPie、JavaScript fetch、Python requests、Go http）。
      7) 執行流程：以步驟分解從接收請求到回應的時序（驗證/授權/存取/錯誤攔截）。
      8) 若找不到明確 login 端點，請回傳候選清單（檔案/行號/關鍵字）並提供下一步追查策略。
      9) 一致性校核：逐條比對路由宣告與實際 handler/service/repo 是否一致（檔案/行數/函式名）；JWT 設定、過期與刷新流程是否與中介層描述一致；錯誤碼是否有單一來源（error catalog）。
      10) 安全缺口清單：列出尚未覆蓋的保護機制與修補建議（速率限制、2FA、敏感資訊遮罩、審計日誌）。

  - name: deep-folder
    description: 深入分析目前選取的資料夾（路由/中介層/DTO/Service/Repo/第三方）
    useCodebase: true
    prompt: |
      對選取資料夾，建立端點清單表：
      | 方法 | 路徑 | 檔案 | Handler | Middlewares | 回應模型 | 備註 |
      並彙整：DTO/驗證、service/repo 依賴、第三方服務；標註 TODO/風險。
      最後附上：一致性校核與安全缺口清單。

  - name: explain-snippet
    description: 解釋選取的程式片段在請求流程中的角色與依賴
    useCodebase: true
    prompt: |
      說明此片段在何處被呼叫、輸入/輸出、與哪些 middleware/service/repo 互動、錯誤/例外處理、是否存取機敏資料或使用加密/簽章；
      必要時列出上下游函式與檔案路徑。請遵循「自我驗證規範」。

prompts:
  - name: "嚴格模式（驗證日誌+引用）"
    description: 任何問題都以自我驗證格式作答
    prompt: |
      使用 systemMessage 的規範，並強制輸出：
      1) 驗證日誌
      2) 引用與證據（檔案路徑與行號/函式）
      3) 假設與不確定性
      4) 測試步驟（若涉及 API/端點）
      5) 矛盾解析（若有）
